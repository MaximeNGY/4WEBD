version: '3.8'

services:
  backend1:
    build: .
    container_name: backend1
    environment:
      MONGO_URI: ${MONGO_URI}
      JWT_SECRET: ${JWT_SECRET}
    volumes:
      - ./logs:/app/logs
    networks:
      - backend_network
    ports:
      - "3000:3000"
    command: >
      bash -c "npm install &&
      until nc -z mongo 27017; do sleep 2; echo 'En attente de MongoDB...'; done &&
      node scripts/initData.js &&
      npm start"
    depends_on:
      mongo:
        condition: service_healthy

  backend2:
    build: .
    container_name: backend2
    environment:
      MONGO_URI: ${MONGO_URI}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: development
    volumes:
      - ./logs:/app/logs
    networks:
      - backend_network
    ports:
      - "3001:3000"
    command: npm start
    depends_on:
      - mongo
      - backend1

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "5000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend1
      - backend2
    networks:
      - backend_network

  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    volumes:
      - mongo_data:/data/db
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 10s
      retries: 30
    ports:
      - "27017:27017"

volumes:
  mongo_data:
    driver: local

networks:
  backend_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.18.0.0/16