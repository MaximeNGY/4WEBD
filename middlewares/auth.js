import jwt from 'jsonwebtoken';
import logger from '../config/logger.js';

const authMiddleware = (req, res, next) => {
  const token = req.header('Authorization'); // R√©cup√©rer le token
  if (!token) {
    logger.warn("üö´ Acc√®s refus√© : aucun token fourni");
    return res.status(401).json({ message: "Acc√®s refus√©. Aucun token fourni." });
  }

  // Supprimer le pr√©fixe "Bearer " et r√©cup√©rer uniquement le token
  const tokenWithoutBearer = token.split(' ')[1];
  if (!tokenWithoutBearer) {
    logger.error("‚ùå Format du token invalide.");
    return res.status(401).json({ message: 'Format du token invalide.' });
  }

  try {
    const decoded = jwt.verify(tokenWithoutBearer, process.env.JWT_SECRET); // V√©rifier le token
    
    req.user = decoded;
    logger.info(`‚úÖ Token valide : utilisateur ${req.user.id}`);
    next(); // Passer √† la prochaine √©tape
  } catch (err) {
    logger.error("‚ùå Token invalide ou expir√©");
    logger.info(`Token re√ßu : ${token}`); 
    res.status(401).json({ message: "Token invalide." });
  }
};

export default authMiddleware;
